# @file serverless.yml
# @author Gianpiero Benvenuto
# @description Configura el despliegue del backend de citas m√©dicas con Serverless Framework en AWS: define el servicio, entorno (dev/prod), proveedor (AWS, Node.js 20.x), variables de entorno, roles IAM para DynamoDB, CloudWatch, SNS, SQS y EventBridge; empaquetado, funciones Lambda (endpoints HTTP y colas SQS), y recursos gestionados (tablas DynamoDB, colas SQS, topics SNS, bus de eventos y reglas).

service: reto-agenda-medica-backend

useDotenv: true
frameworkVersion: "4"
configValidationMode: "off"

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  memorySize: 128
  timeout: 10

  apiGateway:
    usagePlan:
      throttle:
        rateLimit: 50
        burstLimit: 100

  environment:
    RDS_DATABASE_PE: appointments
    TABLE_PE: appointments_pe
    RDS_DATABASE_CL: appointments
    TABLE_CL: appointments_cl
    APPOINTMENTS_TABLE: ${self:service}-appointments-${self:provider.stage}
    SNS_PE_ARN: { Ref: SnsTopicPE }
    SNS_CL_ARN: { Ref: SnsTopicCL }
    EVENT_BUS_NAME: appointments-bus
    RDS_SECRET_ARN: ${env:RDS_SECRET_ARN}
    CLOUDWATCH_LOG_GROUP: ${env:CLOUDWATCH_LOG_GROUP}
    CLOUDWATCH_LOG_STREAM: ${env:CLOUDWATCH_LOG_STREAM}
    RDS_HOST: ${env:RDS_HOST, 'reto-agenda-medica-backend-dev.clb6uax9fcm1.us-east-1.rds.amazonaws.com'}
    RDS_PORT: ${env:RDS_PORT, '3306'}
    RDS_DATABASE: ${env:RDS_DATABASE, 'appointments'}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:Scan
            - dynamodb:Query
            - dynamodb:UpdateItem
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-appointments-${self:provider.stage}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-appointments-${self:provider.stage}/index/InsuredIndex

        - Effect: Allow
          Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource:
            - arn:aws:logs:${self:provider.region}:*:log-group:${self:provider.environment.CLOUDWATCH_LOG_GROUP}:*

        - Effect: Allow
          Action:
            - sns:Publish
          Resource:
            - !Ref SnsTopicPE
            - !Ref SnsTopicCL

        - Effect: Allow
          Action:
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
          Resource:
            - !GetAtt SqsQueuePE.Arn
            - !GetAtt SqsQueueCL.Arn
            - !GetAtt CompletedAppointmentsQueue.Arn

        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource:
            - ${env:RDS_SECRET_ARN}

        - Effect: Allow
          Action:
            - events:PutEvents
          Resource:
            - arn:aws:events:${self:provider.region}:${aws:accountId}:event-bus/${self:provider.environment.EVENT_BUS_NAME}

  tracing:
    lambda: true

package:
  individually: true
  patterns:
    - "node_modules/swagger-ui-dist/**"
    - "openapi.json"

functions:
  docs:
    handler: src/handlers/docs.handler
    tracing: Active
    memorySize: 128
    timeout: 5
    events:
      - http:
          path: docs
          method: any
          cors: true
      - http:
          path: docs/{proxy+}
          method: any
          cors: true
      - http:
          path: /{asset+}
          method: any
          cors: true
      - http:
          path: favicon.ico
          method: any
          cors: true

  appointmentCreate:
    handler: src/handlers/appointment.handler
    memorySize: 512
    timeout: 5
    events:
      - http:
          path: appointments
          method: post
          cors: true

  appointmentList:
    handler: src/handlers/appointment.handler
    memorySize: 512
    timeout: 5
    events:
      - http:
          path: appointments/{insuredId}
          method: get
          cors: true

  appointmentPE:
    handler: src/handlers/appointment_pe.handler
    memorySize: 512
    timeout: 30
    events:
      - sqs:
          arn:
            Fn::GetAtt: [SqsQueuePE, Arn]
          batchSize: 10

  appointmentCL:
    handler: src/handlers/appointment_cl.handler
    memorySize: 512
    timeout: 30
    events:
      - sqs:
          arn:
            Fn::GetAtt: [SqsQueueCL, Arn]
          batchSize: 10

  appointmentCompletedHandler:
    handler: src/handlers/appointment_completed.handler
    memorySize: 512
    timeout: 30
    events:
      - sqs:
          arn:
            Fn::GetAtt: [CompletedAppointmentsQueue, Arn]
          batchSize: 10

resources:
  Resources:
    AppointmentsDDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.APPOINTMENTS_TABLE}
        AttributeDefinitions:
          - AttributeName: appointmentId
            AttributeType: S
          - AttributeName: insuredId
            AttributeType: S
        KeySchema:
          - AttributeName: appointmentId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: InsuredIndex
            KeySchema:
              - AttributeName: insuredId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    CompletedAppointmentsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: completed-appointments-queue

    CompletedAppointmentsRule:
      Type: AWS::Events::Rule
      Properties:
        Name: CompletedAppointmentsRule
        EventBusName: ${self:provider.environment.EVENT_BUS_NAME}
        EventPattern:
          source:
            - appointments.pe
            - appointments.cl
          detail-type:
            - AppointmentCompleted
        Targets:
          - Arn: !GetAtt CompletedAppointmentsQueue.Arn
            Id: "ToCompletedQueue"

    CompletedAppointmentsQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref CompletedAppointmentsQueue
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: events.amazonaws.com
              Action: sqs:SendMessage
              Resource: !GetAtt CompletedAppointmentsQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !GetAtt CompletedAppointmentsRule.Arn

    SqsQueuePE:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: appointments-pe-queue

    SqsQueueCL:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: appointments-cl-queue

    SnsTopicPE:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: appointments-pe-topic

    SubscriptionPE:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        TopicArn: !Ref SnsTopicPE
        Endpoint: !GetAtt SqsQueuePE.Arn
        RawMessageDelivery: true

    QueuePolicyPE:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues: [!Ref SqsQueuePE]
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: sns.amazonaws.com
              Action: sqs:SendMessage
              Resource: !GetAtt SqsQueuePE.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref SnsTopicPE

    SnsTopicCL:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: appointments-cl-topic

    SubscriptionCL:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        TopicArn: !Ref SnsTopicCL
        Endpoint: !GetAtt SqsQueueCL.Arn
        RawMessageDelivery: true

    QueuePolicyCL:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues: [!Ref SqsQueueCL]
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: sns.amazonaws.com
              Action: sqs:SendMessage
              Resource: !GetAtt SqsQueueCL.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref SnsTopicCL

    AppointmentsEventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: ${self:provider.environment.EVENT_BUS_NAME}
